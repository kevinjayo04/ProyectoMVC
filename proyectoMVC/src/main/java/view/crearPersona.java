/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.personaController;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import model.persona;
import service.personaService;

/**
 *
 * @author isaac
 */
public class crearPersona extends javax.swing.JFrame {

    personaController personaCtrl;

    public crearPersona() {
        initComponents();
        setTitle("Creacion de Personas");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);

        personaCtrl = new personaController();

        grupoGenero.add(rdButonHombre);
        grupoGenero.add(rdBotonMujer);
    }
    ButtonGroup grupoGenero = new ButtonGroup();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        remplID = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        rdButonHombre = new javax.swing.JRadioButton();
        rdBotonMujer = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("CREACION DE PERSONA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(19, 7, 0, 103);
        jPanel1.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 7, 0, 0);
        jPanel1.add(remplID, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("DNI: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(38, 60, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        txtDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDNIKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 16;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 133;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(38, 18, 0, 103);
        jPanel1.add(txtDNI, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Nombre: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(38, 60, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 12;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 102;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(38, 3, 0, 103);
        jPanel1.add(txtNombre, gridBagConstraints);

        rdButonHombre.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rdButonHombre.setText("Hombre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 60, 0, 0);
        jPanel1.add(rdButonHombre, gridBagConstraints);

        rdBotonMujer.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rdBotonMujer.setText("Mujer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 17;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 84, 0, 103);
        jPanel1.add(rdBotonMujer, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Genero:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(39, 60, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        btnAceptar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAceptar.setText("ACEPTAR");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(88, 60, 38, 0);
        jPanel1.add(btnAceptar, gridBagConstraints);

        btnCancelar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 17;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(88, 44, 38, 103);
        jPanel1.add(btnCancelar, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        // TODO add your handling code here:
        try {
            if (!validarCampos()) {
                return;
            }

            String nombre = txtNombre.getText().trim();
            String dni = txtDNI.getText().trim();
            String genero = "";

            if (!verificaPalabras(nombre)) {
                JOptionPane.showMessageDialog(this, "Nombre escrito invalido.",
                        "Error de Validacion", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!validarFormatoEspecial(dni)) {
                JOptionPane.showMessageDialog(this, "El DNI debe contener 8 números seguidos de 1 letra, o el NIE comenzar con una letra, seguido de 7 dígitos y terminar con una letra (ejemplo: A1234567B).",
                                          "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return;
                
            }
            dni = dni.toUpperCase();
            txtDNI.setText(dni.toUpperCase());
            
            if (personaCtrl.existeDNI(dni)) {
            JOptionPane.showMessageDialog(this, "El DNI ingresado ya esta registrado.", "Error de Validacion", JOptionPane.WARNING_MESSAGE);
            return;
        }

            if (rdButonHombre.isSelected()) {
                genero = "MASCULINO";
            } else if (rdBotonMujer.isSelected()) {
                genero = "FEMENINO";
            } else {
                JOptionPane.showMessageDialog(this, "Por favor, selecciona un genero.", "Error de Validacion", JOptionPane.WARNING_MESSAGE);
                return;
            }

            personaCtrl.registroPersona(dni, nombre, genero);

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(this, "Datos ingresados correctamente.", "Exito", JOptionPane.INFORMATION_MESSAGE);

            limpiar();

        } catch (Exception e) {
            System.out.println("Error al ingresar la persona: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        int opcion = JOptionPane.showConfirmDialog(null, "¿ Estas seguro de cancelar ? Se perderan los datos ingresados.",
                "Confirmar Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (opcion == JOptionPane.YES_OPTION) {
            // Si el usuario selecciona Si, limpia los campos
            limpiar();

        } else {
            // Si el usuario selecciona No, no hace nada y mantiene los datos actuales
            System.out.println("Cancelacion abortada. Los datos permanecen.");
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtDNIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDNIKeyTyped
        // TODO add your handling code here:
        String regx = "^[a-zA-Z0-9]+$";
        String texto = txtDNI.getText();

        char caracter = evt.getKeyChar();

        if (!Character.toString(caracter).matches(regx)) {
            evt.consume(); // Consume el evento si el caracter no es valido
        }

        if (txtDNI.getText().length() >= 9) {
            evt.consume(); // Consume el evento si se alcanza el limite de caracteres
        }
    }//GEN-LAST:event_txtDNIKeyTyped

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        // TODO add your handling code here:
        String regx = "^[\\p{L} .'-]+$";
        String texto = txtNombre.getText();

        char caracter = evt.getKeyChar();

        if (!Character.toString(caracter).matches(regx)) {
            evt.consume();
        }
        if (txtNombre.getText().length() >= 15) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(crearPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(crearPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(crearPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(crearPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new crearPersona().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton rdBotonMujer;
    private javax.swing.JRadioButton rdButonHombre;
    private javax.swing.JLabel remplID;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    public boolean validarCampos() {
        if (txtDNI.getText().isEmpty() || txtNombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos de texto.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!rdButonHombre.isSelected() && !rdBotonMujer.isSelected()) {
            JOptionPane.showMessageDialog(null, "Por favor, seleccione un genero.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    public void limpiar() {
        txtDNI.setText("");
        txtNombre.setText("");
        grupoGenero.clearSelection();

    }

    public boolean validarFormatoEspecial(String input) {
        input = input.toUpperCase().trim();

        // Expresiones regulares para validar los dos formatos
        String regexDNI = "^[0-9]{8}[A-Z]$";        
        String regexFormatoEspecial = "^[A-Z][0-9]{7}[A-Z]$";

        // Verificar si el input cumple con cualquiera de las dos expresiones regulares
        return input.matches(regexDNI) || input.matches(regexFormatoEspecial);
    }

    public boolean verificaPalabras(String nombre) {
        //lista de palabras para SQL Malisiosas
        String[] palabrasMalisiosas = {"SELECT", "UPDATE", "INSERT", "DELETE", "DROP", "OR", "CREATE"};

        //Comparacion entre mayusculas y minusculas convertidas
        String nombreMayYMin = nombre.toUpperCase();
        //Verifico si si el contains tiene alguna palabra puesta en el arreglo
        for (String palabra : palabrasMalisiosas) {
            if (nombreMayYMin.contains(palabra)) {
                return false;
            }
        }
        return true;
    }

}
